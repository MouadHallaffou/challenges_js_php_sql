les etapes de l'exution du code js :
1 - parsing
2 - compilation 
3 - execution 

1 // Quelle est la diff√©rence entre une base de donn√©s relationnelle et non relationelle ?
Les bases de donn√©es relationnelles (RDBMS) stockent les donn√©es dans des tables avec des relations entre elles, en utilisant des cl√©s primaires et √©trang√®res. Elles utilisent un sch√©ma strict (types, contraintes, etc.).
Les bases de donn√©es non relationnelles (NoSQL) stockent les donn√©es sous diff√©rents formats :
Documents (ex : MongoDB ‚Äì JSON/BSON)
Cl√©-valeur (ex : Redis)
Colonnes (ex : Cassandra)
Graphes (ex : Neo4j)
Elles sont plus flexibles, scalables horizontalement, et souvent utilis√©es dans les applications modernes (temps r√©el, big data, etc.).

2//Quelle est la diff√©rence entre SQL et MySQL ?
SQL (Structured Query Language) est un langage standard utilis√© pour g√©rer et interroger des bases de donn√©es relationnelles. Il permet de faire des op√©rations comme : SELECT, INSERT, UPDATE, DELETE, etc.
MySQL est un Syst√®me de Gestion de Base de Donn√©es Relationnelle (RDBMS) qui utilise le langage SQL pour g√©rer les donn√©es. C‚Äôest l‚Äôun des RDBMS les plus populaires et open-source

3//Qu'est-ce qu'une transaction en SQL et pourquoi est-il important d'utiliser des transactions dans une base de donn√©es relationnelle ? 
Une transaction en SQL est un ensemble d'op√©rations (comme INSERT, UPDATE, DELETE) ex√©cut√©es comme une seule unit√© logique.
Elle garantit que soit toutes les op√©rations r√©ussissent, soit aucune n‚Äôest appliqu√©e. Cela assure la coh√©rence des donn√©es.
Les transactions sont essentielles pour :
√©viter les donn√©es corrompues,
garantir l‚Äôint√©grit√© m√™me en cas de panne ou erreur,
assurer que plusieurs utilisateurs peuvent travailler en m√™me temps sans conflits.

4//Quelles sont les meilleures pratiques pour s√©curiser les bases de donn√©es SQL contre les attaques par injection SQL ?
Pour s√©curiser une base de donn√©es contre les attaques par injection SQL, voici les bonnes pratiques essentielles :
Utiliser des requ√™tes pr√©par√©es (prepared statements) avec bind_param (en mysqli) ou bindValue (en PDO)‚úÖ
üîí Cela emp√™che les entr√©es utilisateur d‚Äô√™tre interpr√©t√©es comme du code SQL.
Valider et filtrer toutes les entr√©es utilisateurs :
Utiliser filter_input(), filter_var() en PHP
Valider les formats d‚Äôe-mails, de nombres, etc.
√âviter de construire des requ√™tes SQL dynamiquement avec des variables (genre : "... WHERE id = $id" ‚ùå)
Utiliser des r√¥les et permissions limit√©s dans la base :
Ne jamais utiliser le compte root en production !
Appliquer le principe du moindre privil√®ge
Tenir √† jour le SGBD et corriger les failles connues (patch de s√©curit√©)
Ne jamais afficher d'erreur SQL brute √† l'utilisateur (mysqli_error() ou PDOException) ‚Äì √ßa peut r√©v√©ler la structure de la BDD ‚ùå

5//Pouvez-vous expliquer la diff√©rence entre les commandes TRUNCATE et DELETE en SQL ?
DELETE : permet de supprimer une ou plusieurs lignes d‚Äôune table. Tu peux utiliser une condition WHERE.
C‚Äôest une commande DML (Data Manipulation Language), elle est loggable (tu peux la rollback).
TRUNCATE : supprime toutes les lignes d‚Äôune table plus rapidement, mais sans possibilit√© de condition.
C‚Äôest une commande DDL (Data Definition Language), irr√©versible dans la majorit√© des cas.
Elle r√©initialise les cl√©s AUTO_INCREMENT et ne d√©clenche pas les triggers ON DELETE.

6//Qu'est-ce qu'une jointure en SQL et quelles sont les diff√©rentes types de jointures ?
Une jointure en SQL est une op√©ration qui permet de combiner des donn√©es de plusieurs tables en fonction d‚Äôune condition logique (souvent l‚Äô√©galit√© entre une cl√© primaire et une cl√© √©trang√®re).
Les jointures sont utilis√©es pour rassembler des informations li√©es r√©parties dans diff√©rentes tables.
üîó Types de jointures :
INNER JOIN	::: Retourne les lignes qui ont une correspondance dans les deux tables
LEFT JOIN (LEFT OUTER)	::: Retourne toutes les lignes de la table de gauche, et les correspondances dans la table de droite (ou NULL)
RIGHT JOIN (RIGHT OUTER) ::: Retourne toutes les lignes de la table de droite, et les correspondances dans la table de gauche (ou NULL)
FULL OUTER JOIN	::: Retourne toutes les lignes de toutes les tables, avec des NULL si pas de correspondance

7// Quelle est la diff√©rence entre les fonctions GROUP BY et HAVING en SQL ?
En SQL, les clauses GROUP BY et HAVING sont souvent utilis√©es ensemble, mais elles ont des r√¥les diff√©rents :
üîπ GROUP BY : sert √† regrouper les lignes qui ont des valeurs identiques dans une ou plusieurs colonnes, afin de faire des calculs agr√©g√©s (SUM(), AVG(), COUNT(), etc.).
üîπ HAVING : permet de filtrer les groupes cr√©√©s par GROUP BY, apr√®s l‚Äôagr√©gation.
Contrairement √† WHERE, qui filtre les lignes brutes, HAVING filtre les r√©sultats agr√©g√©s.

8//Qu'est-ce que la sous-requ√™te (subquery) en SQL et comment l'utilise-t-on dans une requ√™te ?
Une sous-requ√™te (subquery) en SQL est une requ√™te imbriqu√©e dans une autre requ√™te. Elle permet de :
Filtrer les donn√©es (dans WHERE)
R√©cup√©rer une valeur √† ins√©rer dans la requ√™te principale (dans SELECT)
Cr√©er une table temporaire (dans FROM)
Elle est souvent utilis√©e avec des op√©rateurs comme IN, EXISTS, =, >, etc.
üìå Exemple:
sql

-- Afficher les noms des utilisateurs ayant un job
SELECT name
FROM users
WHERE id IN (
  SELECT user_id
  FROM job
);

9//Pouvez-vous expliquer la diff√©rence entre les commandes ALTER et UPDATE en SQL ?
En SQL, les commandes ALTER et UPDATE ont des objectifs totalement diff√©rents :
ALTER sert √† modifier la structure d'une table (ajouter, modifier ou supprimer une colonne, changer un type de donn√©es, etc.)
UPDATE sert √† modifier les donn√©es existantes dans les lignes d‚Äôune table

-- Ajouter une colonne
ALTER TABLE users ADD COLUMN age INT;
-- Supprimer une colonne
ALTER TABLE users DROP COLUMN age;
-- Modifier le type d'une colonne
ALTER TABLE users MODIFY COLUMN name VARCHAR(100);

-- Modifier une donn√©e pr√©cise
UPDATE users
SET name = 'Mouad'
WHERE id = 1;
-- Modifier toutes les lignes
UPDATE users
SET active = 0;

10//Commande pour cr√©er une nouvelle table dans une base de donn√©es SQL ?
CREATE TABLE users (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

11//Qu'est-ce qu'une cl√© primaire (PRIMARY KEY) dans une table SQL, et pourquoi est-elle importante ?
Une cl√© primaire (PRIMARY KEY) est une colonne (ou un ensemble de colonnes) qui permet d‚Äôidentifier de fa√ßon unique chaque ligne d‚Äôune table.
Elle a deux propri√©t√©s fondamentales :
UNIQUE : chaque valeur doit √™tre diff√©rente
NOT NULL : aucune valeur ne peut √™tre nulle
Elle est essentielle car :
Elle garantit l'unicit√© des enregistrements
Elle est utilis√©e dans les jointures (comme cl√© √©trang√®re dans une autre table)
Elle permet une indexation efficace pour la recherche des donn√©es

12//Pouvez-vous expliquer la diff√©rence entre les fonctions SQL COUNT(), SUM(), AVG(), et MAX() ?
Fonction,	Description,	Exemple
COUNT(),	Compte le nombre de lignes ou de valeurs non nulles,	SELECT COUNT(*) FROM users;
SUM(),	Calcule la somme des valeurs num√©riques dans une colonne,	SELECT SUM(price) FROM orders;
AVG(),	Calcule la moyenne arithm√©tique,	SELECT AVG(score) FROM students;
MAX(),	Retourne la valeur maximale d‚Äôune colonne,	SELECT MAX(salary) FROM employees;

13//Qu'est-ce qu'une fonction d'agr√©gation SQL ?
Une fonction d‚Äôagr√©gation en SQL est une fonction qui r√©sume ou agr√®ge plusieurs lignes de donn√©es pour retourner une seule valeur.
Ces fonctions sont souvent utilis√©es avec GROUP BY pour regrouper les r√©sultats par cat√©gories.